//
//  CTranslation.swift
//  Melia
//
//  Created by Raphaël Calabro on 30/04/2022.
//

import Foundation
import MeliceFramework

func translateToC(tree: TokenTree, for definition: MELSpriteDefinition) -> String {
    let sprite = MELSpriteAllocStandalone(definition)
    let finalTree = tree.reduceByInliningValues(from: sprite)
    let symbolTable = finalTree.symbolTable

    let spriteName = definition.nameAsString.lowercased()
    var scriptName = spriteName
    if let motionName = definition.motionName,
       let motionName = String(utf8String: motionName) {
        scriptName = motionName
    }
    var copy = [Character](scriptName)
    for index in 0 ..< copy.count {
        if copy[index] < "a" || copy[index] > "z" {
            copy[index] = "_"
        }
    }
    scriptName = String(copy)

    var cCode = generateHeaderFile(scriptName: scriptName)
    cCode += generateFileStart(scriptName: scriptName, spriteName: spriteName)

    if symbolTable.states.count > 1 {
        cCode += generateStateEnum(scriptName: scriptName, symbolTable: symbolTable)
    }

    // TODO: Générer la structure pour le sprite

    if symbolTable.states.count > 1 {
        cCode += generateGoToStateFunction(scriptName: scriptName, symbolTable: symbolTable)
    }

    return cCode
}

fileprivate func generateHeaderFile(scriptName: String) -> String {
    let today = Date().formatted(.dateTime.day(.twoDigits).month(.twoDigits).year(.defaultDigits))

    return """
//
//  \(scriptName).h
//
//  Generated by Melia on \(today).
//

#ifndef \(scriptName)_h
#define \(scriptName)_h

#include "common.h"
#include "../lib/melice.h"

void \(scriptName)_update(LCDSprite * _Nonnull sprite);

#endif /* \(scriptName)_h */

"""
}

fileprivate func generateFileStart(scriptName: String, spriteName: String) -> String {
    let today = Date().formatted(.dateTime.day(.twoDigits).month(.twoDigits).year(.defaultDigits))

    return """
//
//  \(scriptName).c
//
//  Generated by Melia on \(today).
//

#include "\(scriptName).h"

#include "../gen/sprite\(spriteName).h"

extern MELRectangle camera;

"""
}

fileprivate func generateStateEnum(scriptName: String, symbolTable: SymbolTable) -> String {
    var cCode = "enum \(scriptName)_state {\n"
    for state in symbolTable.states {
        cCode += "    \(state.name),\n"
    }
    cCode += """
};

"""
    return cCode
}

fileprivate func generateGoToStateFunction(scriptName: String, symbolTable: SymbolTable) -> String {
    var cCode = """
static void goToCurrentState(LCDSprite * _Nonnull sprite) {
    struct \(scriptName) *self = (struct \(scriptName) *) playdate->sprite->getUserdata(sprite);
    switch (self->state) {

"""

        for state in symbolTable.states[1...] {
            cCode += """
    case \(state.name):
            playdate->sprite->setUpdateFunction(sprite, &state_\(state.name)0);
        break;

"""
        }

        cCode += """
    default:
            playdate->sprite->setUpdateFunction(sprite, &state_\(symbolTable.states[0].name)0);
        break;
    }
}

"""
    return cCode
}
